##AWS Account Info
{ "SteampipeawsAccountInfo": "steampipe query \"select alias.value as alias, a.arn, a.organization_id, a.account_id, a.title, a.partition, a.region, a.organization_master_account_email, a.organization_master_account_id from aws_account as a cross join jsonb_array_elements(a.account_aliases) as alias(value)\" --output json", "nature": "json" }

###AWS IAM User Info
{ "SteampipeawsIAMUserInfo": "steampipe query \"SELECT user_id,name,path,arn,create_date,mfa_enabled,password_last_used,permissions_boundary_type,partition,region,account_id FROM aws_iam_user\" --output json", "nature": "json" }

##AWS VPC
{ "SteampipeListAllAwsVPCs": "steampipe query \"SELECT vpc_id, arn, cidr_block, state, is_default, dhcp_options_id, owner_id, title, partition, region, account_id FROM aws_vpc\" --output json", "nature": "json" }

###AWS ALB
{ "SteampipeawsEC2ApplicationLoadBalancers": "steampipe query \"SELECT name, arn, type, scheme, canonical_hosted_zone_id, vpc_id, created_time, dns_name, ip_address_type, security_groups, load_balancer_attributes, title, region, account_id FROM aws_ec2_application_load_balancer\" --output json", "nature": "json" }

###AWS VPC Security Groups
{ "SteampipeawsVPCSecurityGroups": "steampipe query \"SELECT group_id, group_name, title, arn, description, vpc_id, owner_id, ip_permissions, region, account_id FROM aws_vpc_security_group\" --output json", "nature": "json" }

## Steampipe S3 Bucket
{ "SteampipeListAllawsS3Buckets": "steampipe query \"select * from aws_s3_bucket\" --output json", "nature": "json" }

# Steampipe Firewalls
{ "SteampipeListDoFirewalls": "steampipe query \"SELECT status,  count(d.*) as Firewalls from  digitalocean_firewall as d group by  status\" --output json", "nature": "json" }
{ "SteampipeListDoFirewallInboundRules": "steampipe query \"SELECT ru.id, ru.title, ru.category, ru.from_id, ru.to_id FROM ( with rules as ( select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'addresses') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'droplet_ids') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'kubernetes_ids') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'load_balancer_uids') as cidr) select distinct cidr_block as id, cidr_block as title, 'cidr_block' as category, null as from_id, null as to_id from rules union select concat(title, '_', rule_description) as id, rule_description as title, 'rule' as category, null as from_id, null as to_id from rules union select distinct title as id, title as title, 'inbound' as category, null as from_id, null as to_id from rules union select null as id, null as title, protocol_number as category, cidr_block as from_id, concat(title, '_', rule_description) as to_id from rules union select null as id, null as title, protocol_number as category, concat(title, '_', rule_description) as from_id, title as to_id from rules ) ru\" --output json", "nature": "json" }
{ "SteampipeListDoFirewallOutboundRules": "steampipe query \"SELECT ru.id, ru.title, ru.category, ru.from_id, ru.to_id FROM (with rules as ( select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp' and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'addresses') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp' and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'droplet_ids') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp' and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp'   and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'kubernetes_ids') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp'   and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP') else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'load_balancer_uids') as cidr) select distinct title as id, title as title, 'inbound' as category, null as from_id, null as to_id, 0 as depth from rules union select concat(title, '_', rule_description) as id, rule_description as title, 'rule' as category, null as from_id, null as to_id, 1 as depth from rules union select distinct cidr_block as id, cidr_block as title, 'cidr_block' as category, null as from_id, null as to_id, 2 as depth from rules union select null as id, null as title, protocol_number as category, concat(title, '_', rule_description) as from_id, title as to_id, null as depth from rules union select null as id, null as title, protocol_number as category, cidr_block as from_id, concat(title, '_', rule_description) as from_id, null as depth from rules) ru\" --output json", "nature": "json" }

##AWS EC2 Instances
{ "SteampipeawsEC2Instances": "steampipe query \"SELECT placement_availability_zone AS az, instance_type, instance_id, account_id, instance_state, user_data, title, image_id, architecture, cpu_options_core_count, launch_time, platform_details, root_device_name, network_interfaces, COUNT(*) FROM aws_ec2_instance GROUP BY placement_availability_zone, instance_type, instance_id, account_id, instance_state, user_data, title, image_id, architecture, cpu_options_core_count, launch_time, platform_details, root_device_name, network_interfaces\" --output json", "nature": "json" }

##AWS Cognito:
#**1. AWS Cognito Identity Pool:**
{ "SteampipeListAllAwsCognitoIdentityPools": "steampipe query \"SELECT identity_pool_id, identity_pool_name, allow_classic_flow, allow_unauthenticated_identities, supported_login_providers, cognito_identity_providers, developer_provider_name, open_id_connect_provider_arns, saml_provider_arns, akas, tags, title, partition, region, account_id, sp_connection_name, sp_ctx, _ctx FROM aws_cognito_identity_pool\" --output json", "nature": "json" }

#**2. AWS Cognito Identity Provider:**
{ "SteampipeListAllAwsCognitoIdentityProviders": "steampipe query \"SELECT provider_name, user_pool_id, attribute_mapping, creation_date, idp_identifiers, last_modified_date, provider_details, provider_type, akas, title, partition, region, account_id, sp_connection_name, sp_ctx, _ctx FROM aws_cognito_identity_provider\" --output json", "nature": "json" }

#**3. AWS Cognito User Pool:**
{ "SteampipeListAllAwsCognitoUserPools": "steampipe query \"SELECT id, name, arn, status, mfa_configuration, creation_date, last_modified_date, tags FROM aws_cognito_user_pool\" --output json", "nature": "json" }

##AWS Amplify:
#Query to List All Amplify Applications:
{ "SteampipeListAllAwsAmplifyApps": "steampipe query \"SELECT app_id, name, description, arn, platform, create_time, build_spec FROM aws_amplify_app\" --output json", "nature": "json" }

##AWS Cost Explorer:
{ "SteampipeListAwsCostDetails": "steampipe query \"SELECT linked_account_id, period_start, period_end, estimated, blended_cost_amount :: numeric :: money, unblended_cost_amount :: numeric :: money, unblended_cost_unit, net_unblended_cost_amount :: numeric :: money, net_unblended_cost_unit, amortized_cost_amount :: numeric :: money, amortized_cost_unit, net_amortized_cost_amount :: numeric :: money, usage_quantity_amount, usage_quantity_unit, partition, region, account_id FROM aws_cost_by_account_monthly ORDER BY linked_account_id, period_start\" --output json", "nature": "json" }
{ "SteampipeAwsCostStatsByAccount": "steampipe query \"SELECT linked_account_id, min(unblended_cost_amount) :: numeric :: money AS min, max(unblended_cost_amount) :: numeric :: money AS max, avg(unblended_cost_amount) :: numeric :: money AS average FROM aws_cost_by_account_monthly GROUP BY linked_account_id ORDER BY linked_account_id\" --output json", "nature": "json" }
{ "SteampipeAwsCostRankByAccount": "steampipe query \"SELECT linked_account_id, period_start, unblended_cost_amount :: numeric :: money, rank() OVER(PARTITION BY linked_account_id ORDER BY unblended_cost_amount DESC) FROM aws_cost_by_account_monthly\" --output json", "nature": "json" }
{ "SteampipeAwsCostMonthOverMonthChange": "steampipe query \"WITH cost_data AS (SELECT linked_account_id, period_start, unblended_cost_amount AS this_month, lag(unblended_cost_amount, -1) OVER(PARTITION BY linked_account_id ORDER BY period_start DESC) AS previous_month FROM aws_cost_by_account_monthly) SELECT linked_account_id, period_start, this_month :: numeric :: money, previous_month :: numeric :: money, round((100 * ((this_month - previous_month) / previous_month)) :: numeric, 2) AS percent_change FROM cost_data ORDER BY linked_account_id, period_start\" --output json", "nature": "json" }
{ "SteampipeListAllAwsCostByServiceUsageTypeMonthly": "steampipe query \"select service, usage_type, period_start, blended_cost_amount::numeric::money, unblended_cost_amount::numeric::money, amortized_cost_amount::numeric::money, net_unblended_cost_amount::numeric::money, net_amortized_cost_amount::numeric::money from aws_cost_by_service_usage_type_monthly order by service, period_start\" --output json", "nature": "json" }


###AWS Cloudwatch:
# Steampipe
{ "SteampipeListAllAwsCloudWatchAlarms": "steampipe query \"select name, state_value, metric_name, actions_enabled, comparison_operator, namespace, statistic from aws_cloudwatch_alarm\" --output json", "nature": "json" }
{ "SteampipeListAllAwsEbsVolumesNotEncrypted": "steampipe query \"select volume_id, encrypted from aws_ebs_volume where not encrypted\" --output json", "nature": "json" }
